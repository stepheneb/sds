class Sock < ActiveRecord::Base
  set_table_name "sds_socks"
  belongs_to :bundle
  belongs_to :pod
  
  def after_create
    self.update_attributes(self.kind)
    self.save_to_file_system
  end
      
  def text
    value = case self.encoding
    when 'gzip+b64'
      self.unpack_gzip_b64_value
    when 'escaped'
      self.unescape_value
    end
    case self.mime_type
    when /xml/
      hash = XmlSimple.new().xml_in(CGI.unescapeHTML(value), {'keeproot' => true})
      XmlSimple.xml_out(hash, {'keeproot' => true})
    when /java_object/
      "java object: #{value.length.to_s} bytes"
    when /text/
      value
    else
      "can't determine how to render this sock as text"
    end
  end    
  
  # calculates and returns a hash: {:mime_type, :encoding, :pas_type, :extension]
  def kind
    types = []
    types = case
    when self.bytearray? && self.pod.rim_name == 'otrunk_drawing'
      ['application/xml+otrunk', 'gzip+b64', 'otrunk_drawing', 'otml']
    when self.bytearray? && self.pod.rim_name == 'trialData'
      ['java_object/gzip+b64', 'gzip+b64', 'trial_data', 'pojo']
    when self.bytearray? && self.pod.rim_name == 'findingsData'
      ['java_object/gzip+b64', 'gzip+b64', 'findings_data', 'pojo']
    when self.bytearray?
      ['java_object/gzip+b64', 'gzip+b64', 'generic_pas_object', 'pojo']
    when self.pod.rim_name == 'model.activity.data'
      ['application/xml+pas-modelreport', 'escaped', 'model.activity.data', 'xml']
    when self.value =~ /Generated by Pedraw/
      ['application/xml+svg', 'escaped', 'pedraw', 'svg']
    else
      ['text/plain', 'escaped', 'note', 'txt']
    end
    {"mime_type" => types[0], "encoding" => types[1], "pas_type" => types[2], "extension" => types[3]}
  end
    
  def unescape_value
    CGI.unescapeHTML(self.value)
  end
  
  def bytearray?
    self.pod.rim_shape == 'bytearray'
  end

  def unpack_gzip_b64_value
    if self.bytearray?
      Zlib::GzipReader.new(StringIO.new(Base64.decode64(self.value))).read
    else
      ""
    end
  end
  
  def unescape
    if !self.bytearray?
      CGI.unescapeHTML(s.value)
    end
  end
  
  def save_to_file_system
    begin
      if ActionController::AbstractRequest.relative_url_root.blank?
        File.open("public/socks/raw/sock_#{self.id.to_s}_#{self.pas_type}_#{self.encoding}", "w") { |f| f.write self.value }
        File.open("public/socks/decoded/sock_#{self.id.to_s}_#{self.pas_type}.#{self.extension}", "w") { |f| f.write self.text }
      else
        File.open("socks/raw/sock_#{self.id.to_s}_#{self.pas_type}_#{self.encoding}", "w") { |f| f.write self.value }
        File.open("socks/decoded/sock_#{self.id.to_s}_#{self.pas_type}.#{self.extension}", "w") { |f| f.write self.text }
      end
    end
  end
  
  def self.export_to_file_system
    puts "Exporting #{Socks.count.to_s} Socks to file system\nprocessing (x100): "
    process_count = 0
    Sock.find(:all, :order => "created_at ASC").each do |s|
      s.save_to_file_system
      process_count += 1
      if process_count == 100
        print '.'
        process_count = 0
      end
    end
  end

end
