require "rexml/document"

jnlp = REXML::Document.new @jnlp.body
jattr = jnlp.root.attributes
info = jnlp.root.elements["information"]
security = jnlp.root.elements["security"]

nl = "\n"
href_url =     @controller.url_for(:controller => 'offering', :action => 'jnlp', :id => @offering.id, :wid => @workgroup.id, :version => @version, :only_path => false).to_s
homepage_url = @controller.url_for(:controller => 'offering', :action => 'show', :id => @offering.id, :only_path => false).to_s
config_url =   @controller.url_for(:controller => "offering", 
  :action => "config", :id => @offering.id, :wid => @workgroup.id, 
  :version => @workgroup.version, :savedata => @savedata, :only_path => false).to_s + "?"  + hash_to_url_params(request.query_parameters())
  
sds_launcher = "net.sf.sail.emf.launch.EMFLauncher2"

# if there is a file-based launcher convert to an sds launcher
case "net.sf.sail.emf.launch.EMFLauncher3"
when jnlp.root.elements["application-desc"].attributes["main-class"]
  jnlp.root.elements["application-desc"].attributes["main-class"] = sds_launcher
when jnlp.root.elements["resources/property"].attributes["value"]
  jnlp.root.elements["resources/property"].attributes["value"] = sds_launcher
end

# if there is an sds_launcher set the application-desc/argument to the config_url
case sds_launcher
when jnlp.root.elements["application-desc"].attributes["main-class"], jnlp.root.elements["resources/property"].attributes["value"]
  jnlp.root.elements["application-desc/argument"].text = config_url
end

resources = []
jnlp.elements.each("//resources") { |e| resources << e } 

xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8"
xml.jnlp("spec" => jattr['spec'], "codebase" => jattr['codebase']) {

#  xml << info.to_s

  xml.information {
    xml.title(@portal.title)
    xml.vendor(@portal.vendor)
    xml.homepage("href" => @portal.home_page_url)
    xml.description(@portal.description)
    xml.icon("href" => @portal.image_url, "height" => "64", "width" => "64")
#    xml << nl + "<offline-allowed/>" 
  }
  xml << security.to_s
  
  resources.each do |r| 
    xml << nl + r.to_s
  end

  xml << nl + jnlp.root.elements["application-desc"].to_s
}

