require "rexml/document"
jnlp = `curl -s #{@offering.jnlp.url}`
jnlp = REXML::Document.new jnlp
jattr = jnlp.root.attributes
info = jnlp.root.elements["information"]
security = jnlp.root.elements["security"]
resources = jnlp.root.elements["resources"]
prop = jnlp.root.elements["resources/property"]
if prop
  prop.add_attribute('value', 'net.sf.sail.emf.launch.EMFLauncher2')
end
application_desc = jnlp.root.elements["application-desc"]
application_desc[1].text = @controller.url_for(:controller => "offering", 
                            :action => "config", 
                            :id => @offering.id, 
                            :wid => @workgroup.id,
                            :version => @version,
                            :only_path => false)

xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8"
xml.jnlp("spec" => jattr['spec'],
        "codebase" => jattr['codebase'], 
        "href" => @controller.url_for(:controller => 'offering', 
                                      :action => 'jnlp', 
                                      :id => @offering.id, 
                                      :wid => @workgroup.id,
                                      :version => @version).to_s) {
#  xml << info.to_s
  xml.information {
    xml.title("Preview Pas Pedagogica")
    xml.vendor("Concord Consortium")
    xml.homepage("href" => @controller.url_for(:controller => 'offering', 
                                  :action => 'show', 
                                  :id => @offering.id).to_s)
    xml.description("Preview Pas Pedagogica")
    xml.icon("href" => "sail_orangecirc_64.gif", "height" => "64", "width" => "64")
    xml << "<offline-allowed/>\n"
    
  }
  xml << security.to_s
  xml << resources.to_s
  xml << application_desc.to_s
}
