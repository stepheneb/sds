jnlp = @jnlp.body_xml
href_url = @controller.url_for(:controller => 'offering', :action => 'jnlp', :id => @offering.id, :wid => @workgroup.id, :version => @version, :only_path => false).to_s
homepage_url = @controller.url_for(:controller => 'offering', :action => 'show', :id => @offering.id, :only_path => false).to_s

url_params_hash = request.query_parameters             # this is a hack because I can't delete hash values from the
url_params_hash.delete('jnlp_filename')   # request.query_parameters hash (should be done in offering_controller)
extra_properties = hash_to_url_params(url_params_hash)
if @direct_bundle
  config_url =   @controller.url_for(:controller => "offering", :action => "config", :id => @offering.id, 
    :wid => @workgroup.id, :version => @workgroup.version, :savedata => nil, :only_path => false, :nobundles => true,
    :direct_bundle => true, :bid => @bundle_id).to_s
else
  config_url =   @controller.url_for(:controller => "offering", :action => "config", :id => @offering.id, 
    :wid => @workgroup.id, :version => @workgroup.version, :savedata => @savedata, :only_path => false, :nobundles => @nobundles).to_s
end
if !extra_properties.blank?
  config_url = config_url + '?' + extra_properties.to_s
end

sds_launcher = "net.sf.sail.emf.launch.EMFLauncher2"
config_url_pattern = "__CONFIG_URL__"

if USE_LIBXML
  app_desc = jnlp.find('./application-desc').first
  app_desc_main_class = app_desc['main-class']
  app_desc << XML::Node.new('argument') unless app_desc.find('argument').first
  app_desc_arg = app_desc.find('argument').first
#  res_prop_value = jnlp.find('./resources/property/@value').first.value
else
  app_desc = jnlp.elements["application-desc"]
  app_desc_main_class = app_desc.attributes["main-class"]
  res_prop = jnlp.elements["resources/property"]
#  if res_prop  # some jnlps don't have properties defined
#    res_prop_value = res_prop.attributes["value"]
#  end
  app_desc_arg = jnlp.elements["application-desc/argument"] || jnlp.elements["application-desc"].add_element('argument')
end

# if there is a file-based launcher convert to an sds launcher
case app_desc_main_class
when "net.sf.sail.emf.launch.EMFLauncher3"
  if USE_LIBXML
    app_desc['main-class'] = app_desc_main_class = sds_launcher
  else
    app_desc.attributes["main-class"] = app_desc_main_class = sds_launcher
  end
# when res_prop_value
#   if USE_LIBXML
#   else
#     res_prop.attributes["value"] = res_prop_value = sds_launcher
#   end
end

# if there is an sds_launcher set the application-desc/argument to the config_url
# **
# ** Warning ... ugly hack ahead ... should be refactored ...
# **
# ** Because this is is being put in an xml file which should be well formed
# ** replace andy occurances of & in the config_url with the entity $amp;
# ** later in OfferingController#config the parsing of the query parameters is
# ** is currently based on the '&' as a delimeter -- so a futher hack is 
# ** needed there to strip the char string 'amp;' from the bginning of the parameter
# ** strings before assiging them to aninstnace variable to be used in the 
# ** Offering config view.
#
if USE_LIBXML
  if app_desc_main_class == sds_launcher || config_url_pattern == app_desc_arg.content.strip
    app_desc_arg.content = config_url.gsub(/&/, '&amp;')
  end
else
  if app_desc_main_class == sds_launcher || config_url_pattern == app_desc_arg.text.strip
    app_desc_arg.text = config_url.gsub(/&/, '&amp;')
  end
end

resources = ''
if USE_LIBXML
  resources = jnlp.find('resources')
  resources.each do |res|
    if res['os'] == nil && @jnlp_properties
      @jnlp_properties.each do |name, value|
        res << pr = XML::Node.new('property')
        pr['name'] = name 
        pr['value'] = value
      end
      break
    end
  end
  resources = jnlp.find('//resources') 
else
  resources = []
  added_props = false
  jnlp.elements.each("//resources") { |e|
    resources.unshift(e)
    if e.attributes["os"] == nil && @jnlp_properties && !added_props
      @jnlp_properties.each do |name, value|
        resources[0] << pr = REXML::Element.new("property")
        pr.attributes["name"] = name
        pr.attributes["value"] = value
      end  
      added_props = true
    end
  }
  
end

xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8"
if USE_LIBXML
  xml.jnlp("spec" => jnlp['spec'], "codebase" => jnlp['codebase']) { render_jnlp_body(xml, jnlp, resources) }
else
  xml.jnlp("spec" => jnlp.attributes['spec'], "codebase" => jnlp.attributes['codebase']) { render_jnlp_body(xml, jnlp, resources) }
end


