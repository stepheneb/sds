xm.entry 'xml:base' => url_for(:controller => 'offering', :action => 'list', :only_path => false).to_s do
  xm.author do
    xm.name workgroup.member_names
  end
  xm.id        "tag:#{request.host_with_port},#{workgroup.updated_at.to_s}:#{workgroup.id}"
  xm.published workgroup.created_at.xmlschema
  xm.updated   workgroup.updated_at.xmlschema
  xm.link "rel" => "alternate", "type" => "text/html", 
    "href" => url_for(:controller => 'workgroup', :action => 'show', :id => workgroup.id, :only_path => false).to_s
  xm.title     strip_tags("#{workgroup.name} (#{workgroup.bundles.length.to_s})")
  
  xm << %{<content type="html">\n}
  xm << h(%{<p>Workgroup Sessions: #{workgroup.bundles.length.to_s}.\n</p>})
  xm << h(%{<p>Workgroup: "#{workgroup.name}", <em>(id: #{workgroup.id})</em><br />
    SailUsers: #{workgroup.member_names}, <em>(ids: #{workgroup.members.collect {|m| m.id}.join(', ')})</em>. <br />
    Offering: "#{workgroup.offering.name}", <em>(id: #{workgroup.offering.id})</em><br />
    Curnit: "#{workgroup.offering.curnit.name}" <em>(id: #{workgroup.offering.curnit.id}), last updated: #{workgroup.offering.curnit.last_modified}</em>.})
  workgroup.bundles.each do |b| 
    xm << h(%{<hr /><div style="background-color: #BBFFEE; padding: 10px; border: 1px solid gray; margin: 10px; font: 9px sans-serif;">})
    xm << h(%{#{b.created_at.to_s}<br >Bundle: #{b.id}<br />Workgroup membership version: #{b.workgroup_version.to_s}.<br />})
    b.socks.each do |s|
      xm << h(%{<br />Pod: #{s.pod.id}: UUID: #{s.pod.uuid})<br />Rim name: #{s.pod.rim_name}<br />Sock: #{s.id}#{if s.duplicate then " <em>duplicate</em>" end}, ms offset: #{s.ms_offset}.<br />})
      xm << h(%{<div style="background-color: #99FFCC; padding: 10px; border: 1px dotted gray; margin: 5px 5px; 10px 10px font: sans-serif;">})
      begin
        value = CGI.unescapeHTML(s.value)
        # try and convert to xml, will generate an error if not possible
        hash = XmlSimple.new().xml_in(CGI.unescapeHTML(s.value), {'keeproot' => true})
        value = XmlSimple.xml_out(hash, {'keeproot' => true})
      rescue
      end
      xm << CGI.escapeHTML("<pre>#{CGI.escapeHTML(value)}</pre>")
      xm << h(%{</div>})
    end
    xm << h(%{</div>})
  end
  xm << %{</content>}
end
